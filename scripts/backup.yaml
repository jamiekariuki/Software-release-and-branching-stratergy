name: Dev CI/CD (SSH Deployment)

on:
  push:
    branches:
      - main

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} # AWS account id
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }} # full ECR URI from Terraform
  EC2_USER: ec2-user # default user for EC2
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }} # private key for SSH to EC2
  EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }} # public IP or DNS of your EC2

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build Vite app
        run: npm run build

  versioning:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      new_version: ${{ steps.bump.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump semantic version
        id: bump
        run: ./scripts/bump-version.sh

  push:
    runs-on: ubuntu-latest
    needs: versioning

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/dev-github-oidc-role
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        run: |
          VERSION=${{ needs.versioning.outputs.new_version }}
          echo "Using ECR registry: $ECR_REGISTRY"

          docker build -t $ECR_REGISTRY:$VERSION -t $ECR_REGISTRY:latest .
          docker push $ECR_REGISTRY:$VERSION
          docker push $ECR_REGISTRY:latest

  deploy:
    runs-on: ubuntu-latest
    needs: push
    env:
      VERSION: ${{ needs.versioning.outputs.new_version }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Copy repo to EC2
        run: |
          scp -i ~/.ssh/id_rsa -r . ${EC2_USER}@${EC2_HOST}:/home/ec2-user/app

      - name: Deploy via SSH
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} "
            cd /home/ec2-user/app
            export ECR_REGISTRY=$ECR_REGISTRY
            export VERSION=$VERSION
            docker-compose pull
            docker-compose up -d --build
          "

  tag_release:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push Git tag
        run: |
          VERSION=${{ needs.versioning.outputs.new_version }}
          git tag $VERSION
          git push origin $VERSION
---
##########################################
name: CI + Terraform Workflow
on:
  push:
    branches:
      - main

jobs:
  # Step 1: Detect folder changes
  filter-changes:
    runs-on: ubuntu-latest
    outputs:
      infra_changed: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for folder changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            infra:
              - 'infrastructure/**'

  # Step 2: Run Terraform only if infra changed
name: CI + Terraform Workflow
on:
  push:
    branches: [ main ]

jobs:
  filter-changes:
    runs-on: ubuntu-latest
    outputs:
      infra_changed: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
      - name: Check for folder changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            infra:
              - 'infrastructure/**'

  terraform:
    needs: filter-changes
    runs-on: ubuntu-latest
    if: needs.filter-changes.outputs.infra_changed == 'true'
    outputs:
      ecr_url: ${{ steps.collect.outputs.ecr_url }}
      ec2_ip:  ${{ steps.collect.outputs.ec2_ip }}
    steps:
      - uses: actions/checkout@v4

      # ✅ Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # terraform_version: 1.9.x   # (optional) pin a version if you want

      # ✅ Tell AWS which account/region
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: terraform init -upgrade

      - name: Terraform Apply
        working-directory: infrastructure/terraform
        env:
          TF_IN_AUTOMATION: true
        run: terraform apply -auto-approve -input=false

      # ✅ Expose TF outputs to the next job (no files/artifacts needed)
      - name: Collect outputs
        id: collect
        working-directory: infrastructure/terraform
        run: |
          echo "ecr_url=$(terraform output -raw ecr_url)" >> "$GITHUB_OUTPUT"
          echo "ec2_ip=$(terraform output -raw ec2_ip)"   >> "$GITHUB_OUTPUT"

  ci:
    needs: [filter-changes, terraform]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Resolve values: use TF outputs if infra changed, otherwise fall back
      - name: Resolve infra values
        run: |
          if [ "${{ needs.filter-changes.outputs.infra_changed }}" = "true" ]; then
            echo "ECR_URL=${{ needs.terraform.outputs.ecr_url }}" >> "$GITHUB_ENV"
            echo "EC2_IP=${{ needs.terraform.outputs.ec2_ip }}"   >> "$GITHUB_ENV"
          else
            echo "ECR_URL=${{ secrets.ECR_REGISTRY }}" >> "$GITHUB_ENV"
            echo "EC2_IP=${{ secrets.DEFAULT_EC2_IP }}" >> "$GITHUB_ENV"
          fi

      # Example usage in CI
      - name: Build & push image
        run: |
          echo "Using ECR: $ECR_URL, EC2: $EC2_IP"
          # docker build -t "$ECR_URL/my-app:latest" .
          # aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          #   | docker login --username AWS --password-stdin "$ECR_URL"
          # docker push "$ECR_URL/my-app:latest"

