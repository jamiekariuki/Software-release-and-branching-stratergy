name: CI + Terraform

on:
  push:
    branches:
      - main

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  ENVIRONMENT: stage

permissions:
  contents: write

jobs:
  # Step 1: Detect infra changes
  filter-changes:
    runs-on: ubuntu-latest
    outputs:
      infra_changed: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
      - name: Check for folder changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            infra:
              - 'infrastructure/terraform/**'

  # Step 2: Terraform Apply
  terraform:
    needs: filter-changes
    runs-on: ubuntu-latest
    if: needs.filter-changes.outputs.infra_changed == 'true'

    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: terraform init -upgrade
      - name: Select Terraform Workspace
        working-directory: infrastructure/terraform
        run: |
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT
      - name: Terraform Apply
        working-directory: infrastructure/terraform
        env:
          TF_IN_AUTOMATION: true
        run: terraform apply -auto-approve -input=false -var="ENV_PREFIX=$ENVIRONMENT"

  # Step 3: Download TF state from S3 and save outputs as artifact
  tf-outputs:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download Terraform state
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          aws s3 cp "s3://$AWS_ACCOUNT_ID-app-dev/env:/$ENVIRONMENT/networking/terraform.tfstate" terraform.tfstate

      - name: Extract outputs -> file
        run: |
          jq -r '{ecr_url: .outputs.ecr_repo_uri.value, ec2_ip: .outputs.web_instance_public_ip.value}' terraform.tfstate > tf-outputs.json
          echo "Extracted terraform outputs:"
          cat tf-outputs.json

      - name: Upload TF outputs artifact
        uses: actions/upload-artifact@v4
        with:
          name: tf-outputs
          path: tf-outputs.json

  # CI Build
  build:
    runs-on: ubuntu-latest
    #    needs: tf-outputs
    defaults:
      run:
        working-directory: app
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: app/package-lock.json
      - run: npm ci
      - run: npm run build

  # Semantic versioning
  versioning:
    runs-on: ubuntu-latest
    #  needs: [build, tf-outputs]
    outputs:
      new_version: ${{ steps.bump.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - run: chmod +x ./.github/actions/scripts/bump-version.sh
      - id: bump
        run: ./.github/actions/scripts/bump-version.sh

  # Build and push Docker image to ECR
  push:
    runs-on: ubuntu-latest
    needs: [versioning, tf-outputs, build]
    env:
      VERSION: ${{ needs.versioning.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Load TF Outputs
        uses: ./.github/actions/load-tf-outputs

      - name: Build, tag, and push image to ECR
        run: |
          echo "ECR_REGISTRY=$ECR_URL"
          echo "VERSION=$VERSION"
          docker build -t $ECR_URL:$VERSION ./app
          docker push $ECR_URL:$VERSION
